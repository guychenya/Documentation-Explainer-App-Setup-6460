// Export service for handling different export formats

export const exportToMarkdown = (explanation) => {
  if (!explanation) return '';

  const markdown = `# Documentation Explanation

## Summary
${explanation.summary}

## Simple Analogy
${explanation.analogy}

## Code Example
\`\`\`javascript
${explanation.codeExample}
\`\`\`

## When to Use This
${explanation.useCases.map((useCase, index) => `${index + 1}. ${useCase}`).join('\n')}

## Key Points to Remember
${explanation.keyPoints.map((point, index) => `${index + 1}. ${point}`).join('\n')}

---
*Generated by DocExplainer*
`;

  return markdown;
};

export const downloadAsFile = (content, filename, mimeType = 'text/plain') => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

export const exportToPDF = async (explanation) => {
  if (!explanation) return;

  // Create HTML content for PDF
  const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Documentation Explanation</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 20px;
        }
        h1, h2 { color: #2d3748; margin-top: 2rem; }
        .analogy { 
          background: #fef5e7; 
          border-left: 4px solid #f6ad55; 
          padding: 1rem; 
          margin: 1rem 0; 
        }
        pre { 
          background: #f7fafc; 
          padding: 1rem; 
          border-radius: 8px; 
          overflow-x: auto;
          border: 1px solid #e2e8f0;
        }
        code { 
          font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; 
          font-size: 0.9em;
        }
        ul, ol { margin: 1rem 0; padding-left: 2rem; }
        li { margin: 0.5rem 0; }
        .footer { 
          text-align: center; 
          margin-top: 3rem; 
          padding-top: 2rem; 
          border-top: 1px solid #e2e8f0; 
          color: #718096; 
          font-size: 0.9em; 
        }
      </style>
    </head>
    <body>
      <h1>üìö Documentation Explanation</h1>
      
      <h2>üìù Summary</h2>
      <p>${explanation.summary.replace(/\n/g, '</p><p>')}</p>
      
      <h2>üí° Simple Analogy</h2>
      <div class="analogy">
        <p>${explanation.analogy}</p>
      </div>
      
      <h2>üíª Code Example</h2>
      <pre><code>${explanation.codeExample}</code></pre>
      
      <h2>üéØ When to Use This</h2>
      <ul>
        ${explanation.useCases.map(useCase => `<li>${useCase}</li>`).join('')}
      </ul>
      
      <h2>üìå Key Points to Remember</h2>
      <ol>
        ${explanation.keyPoints.map(point => `<li>${point}</li>`).join('')}
      </ol>
      
      <div class="footer">
        Generated by DocExplainer ‚Ä¢ ${new Date().toLocaleDateString()}
      </div>
    </body>
    </html>
  `;

  // Download as HTML file (which can be easily converted to PDF by the browser)
  downloadAsFile(htmlContent, 'documentation-explanation.html', 'text/html');
};

export const shareContent = async (explanation) => {
  if (!explanation) return;

  const shareText = `üìö Documentation Explanation

${explanation.summary.substring(0, 200)}...

Generated by DocExplainer`;

  if (navigator.share) {
    try {
      await navigator.share({
        title: 'Documentation Explanation',
        text: shareText,
        url: window.location.href
      });
    } catch (error) {
      // Fallback to clipboard
      copyToClipboard(shareText);
    }
  } else {
    // Fallback to clipboard
    copyToClipboard(shareText);
  }
};

const copyToClipboard = async (text) => {
  try {
    await navigator.clipboard.writeText(text);
    // You could add a toast notification here
    alert('Content copied to clipboard!');
  } catch (error) {
    console.error('Failed to copy to clipboard:', error);
    alert('Failed to copy content. Please try again.');
  }
};